name: Build Flatpak

on:
  push:
    branches: [ main ]
    tags:
      - "cursor-*"
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  APP_ID: co.anysphere.cursor

jobs:
  post-renovate:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write
    if: github.event_name == 'pull_request' && github.actor == 'renovate[bot]'
    outputs:
      changes_detected: ${{ steps.commit.outputs.changes_detected }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 2
      - name: Update checksums
        run: ./${APP_ID}/update-checksum.sh
      - name: Update metainfo
        run: ./${APP_ID}/update-metainfo.sh
      - name: Get last commit message
        id: last-commit
        run: |
          echo "message=$(git log -1 --pretty=%s)" >> $GITHUB_OUTPUT
          echo "author=$(git log -1 --pretty=\"%an <%ae>\")" >> $GITHUB_OUTPUT
      - name: Commit changes
        id: commit
        uses: stefanzweifel/git-auto-commit-action@v6
        with:
          commit_author: ${{ steps.last-commit.outputs.author }}
          commit_message: ${{ steps.last-commit.outputs.message }}
          commit_options: '--amend --no-edit'
          push_options: '--force'
          file_pattern: ${{ env.APP_ID }}/${{ env.APP_ID }}.yaml ${{ env.APP_ID }}/${{ env.APP_ID }}.metainfo.xml
      - name: Trigger build
        uses: benc-uk/workflow-dispatch@v1.2.4
        with:
          workflow: ${{ github.workflow }}
          ref: ${{ github.head_ref }}

  extract-version:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      version: ${{ steps.extract-version.outputs.version }}
      version-changed: ${{ steps.extract-version.outputs.version-changed }}
    needs: post-renovate
    if: >-
      always() && !cancelled() &&
      needs.post-renovate.result == 'skipped'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Extract version
        id: extract-version
        run: |
          set -e

          # Extract version from the URL in the manifest
          SPEC="$(grep -A 3 'filename: appimage' ${APP_ID}/${APP_ID}.yaml)"
          URL="$(echo "$SPEC" | grep -o 'url: .*' | cut -d' ' -f2)"

          # Extract version from URL (e.g., Cursor-1.6.14-x86_64.AppImage -> 1.6.14)
          VERSION="$(echo "$URL" | sed -n 's/.*Cursor-\([0-9]\+\.[0-9]\+\.[0-9]\+\)-.*/\1/p')"

          if [ -z "$VERSION" ]; then
            echo "Error: Could not extract version from URL: $URL"
            exit 1
          fi

          echo "version=${VERSION}" >> $GITHUB_OUTPUT

          # Check if version was updated on this commit
          if git diff HEAD~1..HEAD ${APP_ID}/${APP_ID}.yaml | grep -A 3 'filename: appimage' | grep -q '^+\s*url: '
          then
            echo "version-changed=true" >> $GITHUB_OUTPUT
          else
            echo "version-changed=false" >> $GITHUB_OUTPUT
          fi

  build:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/flathub-infra/flatpak-github-actions:freedesktop-24.08
      options: --privileged
    permissions:
      contents: read
      checks: write
    needs: extract-version
    if: >-
      always() && !cancelled() &&
      needs.extract-version.result == 'success'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup GPG
        env:
          GPG_KEY_GREP: ${{ secrets.GPG_KEY_GREP }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
        run: |
          set -e

          gpg --list-keys --with-keygrip
          echo "allow-preset-passphrase" >> ~/.gnupg/gpg-agent.conf
          gpg-connect-agent reloadagent /bye
          echo "$GPG_PASSPHRASE" | /usr/libexec/gpg-preset-passphrase --preset "$GPG_KEY_GREP"
          echo "$GPG_PRIVATE_KEY" > repo.private.gpg
          gpg --import --batch repo.private.gpg
          rm repo.private.gpg
          rm -f repo.gpg
          gpg --export "$GPG_KEY_ID" > repo.gpg
          if [ ! -f repo.gpg ]; then
            echo "Error: Could not export GPG key" >&2
            exit 1
          fi

      - name: Restore repository
        # Test restore without tag
        #if: github.ref_type == 'tag'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
        run: |
          set -e

          # Check if repository exists
          BASE_URL="$(gh api /repos/${GITHUB_REPOSITORY}/pages --jq .html_url)"
          curl -o/dev/null -sf "${BASE_URL}summary" || {
            echo "Repository does not exist" >&2
            exit 0
          }

          # Mirror repository
          ostree --repo=repo init --mode=archive
          ostree --repo=repo remote add cursor-flatpak "${BASE_URL%/}" --gpg-import=repo.gpg
          ostree --repo=repo pull --mirror cursor-flatpak --depth=-1

          # Generate summary
          flatpak build-update-repo \
            --gpg-sign="$GPG_KEY_ID" \
            --generate-static-deltas \
            --prune \
            repo

          # Restore config
          curl -o repo/config -sf "${BASE_URL}config"
          # Remove extra files
          rm -rf repo/*.trustedkeys.gpg repo/extensions repo/state repo/tmp

      - name: Clean branch name
        id: clean-branch-name
        run: |
          BRANCH="${{ github.head_ref || github.ref_name }}"
          echo "branch=${BRANCH//\//-}" >> $GITHUB_OUTPUT

      - name: Build Flatpak
        id: build-flatpak
        uses: jokujossai/flatpak-github-actions/flatpak-builder@c21541c58825c44b4116bde213e0b0418b4b44ce
        with:
          bundle: ${{ env.APP_ID }}.flatpak
          manifest-path: ${{ env.APP_ID }}/${{ env.APP_ID }}.yaml
          branch: ${{ steps.clean-branch-name.outputs.branch }}
          gpg-sign: ${{ secrets.GPG_KEY_ID }}
          subject: "Cursor ${{ needs.extract-version.outputs.version }}"

      - name: Update repo
        id: update-repo
        env:
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
        run: |
          flatpak build-update-repo \
            --gpg-sign="$GPG_KEY_ID" \
            --generate-static-deltas \
            --prune \
            repo

      - name: Initialize github-pages
        id: init-github-pages
        run: |
          set -e

          gpg_base64="$(gpg --export "$GPG_KEY_ID" | base64 -w 0)"

          cat <<EOF > repo/cursor.flatpakrepo
          [Flatpak Repo]
          Title=Cursor
          Url=https://kk-daniel.github.io/cursor-flatpak
          Homepage=https://cursor.com
          GPGKey=$gpg_base64
          EOF

          cat <<EOF > repo/index.html
          <!DOCTYPE html>
          <html>
            <head>
              <title>Cursor Flatpak Repository</title>
            </head>
            <body>
              <h1>Cursor</h1>
              <p>This is a Flatpak repository for Cursor.</p>
              <p>To install Cursor, run the following commands:</p>
              <pre>
                flatpak remote-add --if-not-exists cursor-flatpak https://kk-daniel.github.io/cursor-flatpak/cursor.flatpakrepo
                flatpak install ${APP_ID}
              </pre>
            </body>
          </html>
          EOF

      - name: Upload repository as artifact (tags only)
        if: github.ref_type == 'tag'
        uses: actions/upload-artifact@v4
        with:
          name: flatpak-repo
          path: repo/
          retention-days: 30

      - name: Save pages artifact
        id: save-repo
        uses: actions/upload-pages-artifact@v3
        with:
          path: repo/

      - name: Publish check result
        uses: LouisBrunner/checks-action@v2.0.0
        if: always()
        with:
          token: ${{ github.token }}
          name: Build Result
          conclusion: >-
            ${{ (steps.build-flatpak.conclusion == 'success' && steps.save-repo.conclusion == 'skipped' && 'failure' ) || (steps.build-flatpak.conclusion == 'success' && steps.save-repo.conclusion) || steps.build-flatpak.conclusion }}
          output: |
            {
              "summary": "${{ (steps.build-flatpak.conclusion == 'success' && steps.save-repo.conclusion == 'skipped' && 'failure' ) || (steps.build-flatpak.conclusion == 'success' && steps.save-repo.conclusion) || steps.build-flatpak.conclusion }}",
              "text_description":
                "Build flatpak: ${{ steps.build-flatpak.conclusion }}\nUpdate repo: ${{ steps.update-repo.conclusion }}\nInit github pages: ${{ steps.init-github-pages.conclusion }}\nSave repo: ${{ steps.save-repo.conclusion }}"
            }

  auto-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs: [build, extract-version]
    if: >-
      always() && !cancelled() &&
      needs.build.result == 'success' &&
      github.ref == 'refs/heads/main' &&
      github.ref_type != 'tag' &&
      needs.extract-version.outputs.version-changed == 'true'
    steps:
      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: cursor-${{ needs.extract-version.outputs.version }}
          files: "*.flatpak"
          overwrite_files: true
          body: "Cursor ${{ needs.extract-version.outputs.version }}"
          prerelease: true

  deploy:
    if: >-
      always() && !cancelled() &&
      github.ref_type == 'tag' &&
      needs.build.result == 'success'
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
      pages: write
      id-token: write
    steps:
      - name: Download flatpak artifact
        uses: actions/download-artifact@v4
        with:
          pattern: "*.flatpak"
          merge-multiple: true
      - name: Publish flatpak
        uses: softprops/action-gh-release@v2
        with:
          files: "*.flatpak"
          overwrite_files: true
          prerelease: false
      - name: Deploy github pages
        uses: actions/deploy-pages@v4
